/*
 * -------------------------------------------------
 *  peterk87/nf-illmap Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 * Cluster-specific config options should be saved
 * in the conf folder and imported under a profile
 * name here.
 */

params {
  outdir = 'results'
  tracedir = "${params.outdir}/pipeline_info"
  slurm_queue = ""
  reads = "reads/*_R{1,2}_*.fastq.gz"
  refs = "refs/*.fasta"
  bedfile = null // primer scheme BED file
  outdir = "results"
  low_coverage = 3
  no_coverage = 0
  low_cov_char = 'N'
  no_cov_char = '-'
  single_end = false

  // SLURM cluster options
  slurm_queue = null
  slurm_queue_size = 100

  // Boilerplate options
  name = false
  help = false
  monochrome_logs = false
  container = 'peterk87/nf-illmap'
}

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'
process.container = params.container
singularity.autoMounts = true

profiles {
  conda { 
    process.conda = "$baseDir/environment.yml" 
  }
  debug { 
    process.beforeScript = 'echo $HOSTNAME'
  }
  docker {
    docker.enabled = true
  }
  singularity {
    singularity.enabled = true
    singularity.autoMounts = true
    // provide full container url to Singularity-Hub.org
    process.container = "shub://${params.container}:1.0.0"
  }
  slurm {
    includeConfig 'conf/slurm.config'
  }
  test {
    includeConfig 'conf/test.config'
  }
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

timeline {
  enabled = true
  file = "${params.tracedir}/execution_timeline.html"
}
report {
  enabled = true
  file = "${params.tracedir}/execution_report.html"
}
trace {
  enabled = true
  file = "${params.tracedir}/execution_trace.txt"
}
dag {
  enabled = true
  file = "${params.tracedir}/execution_dag.svg"
}

manifest {
  name = 'peterk87/nf-illmap'
  description = 'Nextflow workflow for read mapping, variant calling and consensus sequence generation from Illumina reads'
  homePage = 'https://github.com/peterk87/nf-illmap'
  author = 'Peter Kruczkiewicz'
  version = '1.0.0'
  mainScript = 'main.nf'
  nextflowVersion = ">=19.10"
}

// Following function from https://github.com/nf-core/vipr/blob/master/nextflow.config#L88
// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
